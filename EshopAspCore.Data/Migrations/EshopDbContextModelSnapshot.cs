// <auto-generated />
using System;
using EshopAspCore.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EshopAspCore.Data.Migrations
{
    [DbContext(typeof(EshopDbContext))]
    partial class EshopDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EshopAspCore.Data.Entity.AppConfig", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.ToTable("AppConfigs");

                    b.HasData(
                        new
                        {
                            Key = "HomeTitle",
                            Value = "This is homepage of Eshop"
                        },
                        new
                        {
                            Key = "HomeKeyword",
                            Value = "This is keyword of Eshop"
                        },
                        new
                        {
                            Key = "HomeDescription",
                            Value = "This is discription of Eshop"
                        });
                });

            modelBuilder.Entity("EshopAspCore.Data.Entity.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a905b66-98fb-4e82-9d98-5cf68ebb16ea"),
                            ConcurrencyStamp = "92db9d58-bd10-450e-ad3a-3fdb570c20cc",
                            Description = "Administrator role",
                            Name = "admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = new Guid("8ff7b33b-1376-4f70-b65a-0337b3e74d25"),
                            ConcurrencyStamp = "1ac5e86c-32e7-4e50-9281-f7635f51e8d4",
                            Description = "User role",
                            Name = "user",
                            NormalizedName = "user"
                        });
                });

            modelBuilder.Entity("EshopAspCore.Data.Entity.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db9ed923-492b-467a-97e4-ee81c9de0a64"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9e264588-2feb-41a5-9344-922e92ff9666",
                            Dob = new DateTime(1998, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "some-admin-email@nonce.fake",
                            EmailConfirmed = true,
                            FirstName = "Trung",
                            LastName = "Do",
                            LockoutEnabled = false,
                            NormalizedEmail = "some-admin-email@nonce.fake",
                            NormalizedUserName = "trung123",
                            PasswordHash = "AQAAAAEAACcQAAAAEFkdgpV02mVGsUZAQfqScVqQncjhR04+zNpua0mQ05Bw/hda7Y5BimnsCxy5HFZd4A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "trung123"
                        });
                });

            modelBuilder.Entity("EshopAspCore.Data.Entity.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("EshopAspCore.Data.Entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsShowOnHome")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsShowOnHome = true,
                            SortOrder = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            IsShowOnHome = true,
                            SortOrder = 2,
                            Status = 1
                        });
                });

            modelBuilder.Entity("EshopAspCore.Data.Entity.CategoryTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("LanguageId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SeoAlias")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SeoDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SeoTitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CategoryTranslations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            LanguageId = "vi",
                            Name = "Máy ảnh",
                            SeoAlias = "may-anh",
                            SeoDescription = "Sản phẩm máy ảnh",
                            SeoTitle = "Sản phẩm máy ảnh"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            LanguageId = "en",
                            Name = "Cannon",
                            SeoAlias = "Cannon",
                            SeoDescription = "The cheap cannon",
                            SeoTitle = "Cannon"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            LanguageId = "vi",
                            Name = "Thẻ nhớ",
                            SeoAlias = "the-nho",
                            SeoDescription = "Sản phẩm thẻ nhớ",
                            SeoTitle = "Sản phẩm thẻ nhớ tốt"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            LanguageId = "en",
                            Name = "Memory stick",
                            SeoAlias = "Memory-stick",
                            SeoDescription = "The best memory stick",
                            SeoTitle = "Memory stick"
                        });
                });

            modelBuilder.Entity("EshopAspCore.Data.Entity.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("EshopAspCore.Data.Entity.Language", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = "vi",
                            IsDefault = true,
                            Name = "Tiếng Việt"
                        },
                        new
                        {
                            Id = "en",
                            IsDefault = false,
                            Name = "English"
                        });
                });

            modelBuilder.Entity("EshopAspCore.Data.Entity.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShipAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShipEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ShipName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShipPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EshopAspCore.Data.Entity.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("EshopAspCore.Data.Entity.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2022, 2, 11, 1, 30, 32, 210, DateTimeKind.Local).AddTicks(3400),
                            IsFeatured = true,
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 20,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2022, 2, 11, 1, 30, 32, 211, DateTimeKind.Local).AddTicks(7551),
                            IsFeatured = true,
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 20,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2022, 2, 11, 1, 30, 32, 211, DateTimeKind.Local).AddTicks(7573),
                            IsFeatured = true,
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 20,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2022, 2, 11, 1, 30, 32, 211, DateTimeKind.Local).AddTicks(7576),
                            IsFeatured = true,
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 20,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2022, 2, 11, 1, 30, 32, 211, DateTimeKind.Local).AddTicks(7577),
                            IsFeatured = true,
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 20,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2022, 2, 11, 1, 30, 32, 211, DateTimeKind.Local).AddTicks(7584),
                            IsFeatured = true,
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 20,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2022, 2, 11, 1, 30, 32, 211, DateTimeKind.Local).AddTicks(7586),
                            IsFeatured = true,
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 20,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2022, 2, 11, 1, 30, 32, 211, DateTimeKind.Local).AddTicks(7587),
                            IsFeatured = true,
                            OriginalPrice = 50000m,
                            Price = 100000m,
                            Stock = 30,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(2022, 2, 11, 1, 30, 32, 211, DateTimeKind.Local).AddTicks(7589),
                            IsFeatured = true,
                            OriginalPrice = 50000m,
                            Price = 100000m,
                            Stock = 30,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 10,
                            DateCreated = new DateTime(2022, 2, 11, 1, 30, 32, 211, DateTimeKind.Local).AddTicks(7592),
                            IsFeatured = true,
                            OriginalPrice = 50000m,
                            Price = 100000m,
                            Stock = 30,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 11,
                            DateCreated = new DateTime(2022, 2, 11, 1, 30, 32, 211, DateTimeKind.Local).AddTicks(7593),
                            IsFeatured = true,
                            OriginalPrice = 50000m,
                            Price = 100000m,
                            Stock = 30,
                            ViewCount = 0
                        });
                });

            modelBuilder.Entity("EshopAspCore.Data.Entity.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Caption = "ThumbnailImage",
                            DateCreated = new DateTime(2022, 2, 11, 1, 30, 32, 212, DateTimeKind.Local).AddTicks(3941),
                            FileSize = 5000L,
                            ImagePath = "m1.jpg",
                            IsDefault = true,
                            ProductId = 1,
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            Caption = "ThumbnailImage",
                            DateCreated = new DateTime(2022, 2, 11, 1, 30, 32, 212, DateTimeKind.Local).AddTicks(5591),
                            FileSize = 5000L,
                            ImagePath = "m2.jpg",
                            IsDefault = true,
                            ProductId = 2,
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 3,
                            Caption = "ThumbnailImage",
                            DateCreated = new DateTime(2022, 2, 11, 1, 30, 32, 212, DateTimeKind.Local).AddTicks(5607),
                            FileSize = 5000L,
                            ImagePath = "m3.jpg",
                            IsDefault = true,
                            ProductId = 3,
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 4,
                            Caption = "ThumbnailImage",
                            DateCreated = new DateTime(2022, 2, 11, 1, 30, 32, 212, DateTimeKind.Local).AddTicks(5610),
                            FileSize = 5000L,
                            ImagePath = "m4.jpg",
                            IsDefault = true,
                            ProductId = 4,
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 5,
                            Caption = "ThumbnailImage",
                            DateCreated = new DateTime(2022, 2, 11, 1, 30, 32, 212, DateTimeKind.Local).AddTicks(5612),
                            FileSize = 5000L,
                            ImagePath = "m5.jpg",
                            IsDefault = true,
                            ProductId = 5,
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 6,
                            Caption = "ThumbnailImage",
                            DateCreated = new DateTime(2022, 2, 11, 1, 30, 32, 212, DateTimeKind.Local).AddTicks(5617),
                            FileSize = 5000L,
                            ImagePath = "m6.jpg",
                            IsDefault = true,
                            ProductId = 6,
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 7,
                            Caption = "ThumbnailImage",
                            DateCreated = new DateTime(2022, 2, 11, 1, 30, 32, 212, DateTimeKind.Local).AddTicks(5620),
                            FileSize = 5000L,
                            ImagePath = "m7.jpg",
                            IsDefault = true,
                            ProductId = 7,
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 8,
                            Caption = "ThumbnailImage",
                            DateCreated = new DateTime(2022, 2, 11, 1, 30, 32, 212, DateTimeKind.Local).AddTicks(5623),
                            FileSize = 5000L,
                            ImagePath = "t1.jpg",
                            IsDefault = true,
                            ProductId = 8,
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 9,
                            Caption = "ThumbnailImage",
                            DateCreated = new DateTime(2022, 2, 11, 1, 30, 32, 212, DateTimeKind.Local).AddTicks(5626),
                            FileSize = 5000L,
                            ImagePath = "t2.jpg",
                            IsDefault = true,
                            ProductId = 9,
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 10,
                            Caption = "ThumbnailImage",
                            DateCreated = new DateTime(2022, 2, 11, 1, 30, 32, 212, DateTimeKind.Local).AddTicks(5629),
                            FileSize = 5000L,
                            ImagePath = "t3.jpg",
                            IsDefault = true,
                            ProductId = 10,
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 11,
                            Caption = "ThumbnailImage",
                            DateCreated = new DateTime(2022, 2, 11, 1, 30, 32, 212, DateTimeKind.Local).AddTicks(5631),
                            FileSize = 5000L,
                            ImagePath = "t4.jpg",
                            IsDefault = true,
                            ProductId = 11,
                            SortOrder = 1
                        });
                });

            modelBuilder.Entity("EshopAspCore.Data.Entity.ProductInCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductInCategories");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 2
                        });
                });

            modelBuilder.Entity("EshopAspCore.Data.Entity.ProductTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LanguageId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("SeoAlias")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SeoDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeoTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductTranslations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LanguageId = "vi",
                            Name = "Máy ảnh 1",
                            ProductId = 1,
                            SeoAlias = "may-anh",
                            SeoDescription = "Sản phẩm máy ảnh tốt",
                            SeoTitle = "Sản phẩm máy ảnh"
                        },
                        new
                        {
                            Id = 2,
                            LanguageId = "en",
                            Name = "Cannon 1",
                            ProductId = 1,
                            SeoAlias = "cannon",
                            SeoDescription = "The best cannon",
                            SeoTitle = "cannon"
                        },
                        new
                        {
                            Id = 3,
                            LanguageId = "vi",
                            Name = "Máy ảnh 2",
                            ProductId = 2,
                            SeoAlias = "may-anh",
                            SeoDescription = "Sản phẩm máy ảnh tốt",
                            SeoTitle = "Sản phẩm máy ảnh"
                        },
                        new
                        {
                            Id = 4,
                            LanguageId = "en",
                            Name = "Cannon 2",
                            ProductId = 2,
                            SeoAlias = "cannon",
                            SeoDescription = "The best cannon",
                            SeoTitle = "cannon"
                        },
                        new
                        {
                            Id = 5,
                            LanguageId = "vi",
                            Name = "Máy ảnh 3",
                            ProductId = 3,
                            SeoAlias = "may-anh",
                            SeoDescription = "Sản phẩm máy ảnh tốt",
                            SeoTitle = "Sản phẩm máy ảnh"
                        },
                        new
                        {
                            Id = 6,
                            LanguageId = "en",
                            Name = "Cannon 3",
                            ProductId = 3,
                            SeoAlias = "cannon",
                            SeoDescription = "The best cannon",
                            SeoTitle = "cannon"
                        },
                        new
                        {
                            Id = 7,
                            LanguageId = "vi",
                            Name = "Máy ảnh 4",
                            ProductId = 4,
                            SeoAlias = "may-anh",
                            SeoDescription = "Sản phẩm máy ảnh tốt",
                            SeoTitle = "Sản phẩm máy ảnh"
                        },
                        new
                        {
                            Id = 8,
                            LanguageId = "en",
                            Name = "Cannon 4",
                            ProductId = 4,
                            SeoAlias = "cannon",
                            SeoDescription = "The best cannon",
                            SeoTitle = "cannon"
                        },
                        new
                        {
                            Id = 9,
                            LanguageId = "vi",
                            Name = "Máy ảnh 5",
                            ProductId = 5,
                            SeoAlias = "may-anh",
                            SeoDescription = "Sản phẩm máy ảnh tốt",
                            SeoTitle = "Sản phẩm máy ảnh"
                        },
                        new
                        {
                            Id = 10,
                            LanguageId = "en",
                            Name = "Cannon 5",
                            ProductId = 5,
                            SeoAlias = "cannon",
                            SeoDescription = "The best cannon",
                            SeoTitle = "cannon"
                        },
                        new
                        {
                            Id = 11,
                            LanguageId = "vi",
                            Name = "Máy ảnh 6",
                            ProductId = 6,
                            SeoAlias = "may-anh",
                            SeoDescription = "Sản phẩm máy ảnh tốt",
                            SeoTitle = "Sản phẩm máy ảnh"
                        },
                        new
                        {
                            Id = 12,
                            LanguageId = "en",
                            Name = "Cannon 6",
                            ProductId = 6,
                            SeoAlias = "cannon",
                            SeoDescription = "The best cannon",
                            SeoTitle = "cannon"
                        },
                        new
                        {
                            Id = 13,
                            LanguageId = "vi",
                            Name = "Máy ảnh 7",
                            ProductId = 7,
                            SeoAlias = "may-anh",
                            SeoDescription = "Sản phẩm máy ảnh tốt",
                            SeoTitle = "Sản phẩm máy ảnh"
                        },
                        new
                        {
                            Id = 14,
                            LanguageId = "en",
                            Name = "Cannon 7",
                            ProductId = 7,
                            SeoAlias = "cannon",
                            SeoDescription = "The best cannon",
                            SeoTitle = "cannon"
                        },
                        new
                        {
                            Id = 15,
                            LanguageId = "vi",
                            Name = "Thẻ nhớ 8",
                            ProductId = 8,
                            SeoAlias = "the-nho",
                            SeoDescription = "Sản phẩm thẻ nhớ tốt",
                            SeoTitle = "Sản phẩm thẻ nhớ"
                        },
                        new
                        {
                            Id = 16,
                            LanguageId = "en",
                            Name = "Memory card 8",
                            ProductId = 8,
                            SeoAlias = "memory-card",
                            SeoDescription = "The best memory card",
                            SeoTitle = "memory-card"
                        },
                        new
                        {
                            Id = 17,
                            LanguageId = "vi",
                            Name = "Thẻ nhớ 9",
                            ProductId = 9,
                            SeoAlias = "the-nho",
                            SeoDescription = "Sản phẩm thẻ nhớ tốt",
                            SeoTitle = "Sản phẩm thẻ nhớ"
                        },
                        new
                        {
                            Id = 18,
                            LanguageId = "en",
                            Name = "Memory card 9",
                            ProductId = 9,
                            SeoAlias = "memory-card",
                            SeoDescription = "The best memory card",
                            SeoTitle = "memory-card"
                        },
                        new
                        {
                            Id = 19,
                            LanguageId = "vi",
                            Name = "Thẻ nhớ 10",
                            ProductId = 10,
                            SeoAlias = "the-nho",
                            SeoDescription = "Sản phẩm thẻ nhớ tốt",
                            SeoTitle = "Sản phẩm thẻ nhớ"
                        },
                        new
                        {
                            Id = 20,
                            LanguageId = "en",
                            Name = "Memory card 10",
                            ProductId = 10,
                            SeoAlias = "memory-card",
                            SeoDescription = "The best memory card",
                            SeoTitle = "memory-card"
                        },
                        new
                        {
                            Id = 21,
                            LanguageId = "vi",
                            Name = "Thẻ nhớ 11",
                            ProductId = 11,
                            SeoAlias = "the-nho",
                            SeoDescription = "Sản phẩm thẻ nhớ tốt",
                            SeoTitle = "Sản phẩm thẻ nhớ"
                        },
                        new
                        {
                            Id = 22,
                            LanguageId = "en",
                            Name = "Memory card 11",
                            ProductId = 11,
                            SeoAlias = "memory-card",
                            SeoDescription = "The best memory card",
                            SeoTitle = "memory-card"
                        });
                });

            modelBuilder.Entity("EshopAspCore.Data.Entity.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ApplyForAll")
                        .HasColumnType("bit");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductCategoryIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("EshopAspCore.Data.Entity.Slide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Slides");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.",
                            Image = "/themes/images/carousel/1.png",
                            Name = "Second Thumbnail label",
                            SortOrder = 1,
                            Status = 1,
                            Url = "#"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.",
                            Image = "/themes/images/carousel/2.png",
                            Name = "Second Thumbnail label",
                            SortOrder = 2,
                            Status = 1,
                            Url = "#"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.",
                            Image = "/themes/images/carousel/3.png",
                            Name = "Second Thumbnail label",
                            SortOrder = 3,
                            Status = 1,
                            Url = "#"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.",
                            Image = "/themes/images/carousel/4.png",
                            Name = "Second Thumbnail label",
                            SortOrder = 4,
                            Status = 1,
                            Url = "#"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.",
                            Image = "/themes/images/carousel/5.png",
                            Name = "Second Thumbnail label",
                            SortOrder = 5,
                            Status = 1,
                            Url = "#"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.",
                            Image = "/themes/images/carousel/6.png",
                            Name = "Second Thumbnail label",
                            SortOrder = 6,
                            Status = 1,
                            Url = "#"
                        });
                });

            modelBuilder.Entity("EshopAspCore.Data.Entity.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ExternalTransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("db9ed923-492b-467a-97e4-ee81c9de0a64"),
                            RoleId = new Guid("2a905b66-98fb-4e82-9d98-5cf68ebb16ea")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserToken");
                });

            modelBuilder.Entity("EshopAspCore.Data.Entity.Cart", b =>
                {
                    b.HasOne("EshopAspCore.Data.Entity.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EshopAspCore.Data.Entity.AppUser", "AppUser")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EshopAspCore.Data.Entity.CategoryTranslation", b =>
                {
                    b.HasOne("EshopAspCore.Data.Entity.Category", "Category")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EshopAspCore.Data.Entity.Language", "Language")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("EshopAspCore.Data.Entity.Order", b =>
                {
                    b.HasOne("EshopAspCore.Data.Entity.AppUser", "AppUser")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("EshopAspCore.Data.Entity.OrderDetail", b =>
                {
                    b.HasOne("EshopAspCore.Data.Entity.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EshopAspCore.Data.Entity.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EshopAspCore.Data.Entity.ProductImage", b =>
                {
                    b.HasOne("EshopAspCore.Data.Entity.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EshopAspCore.Data.Entity.ProductInCategory", b =>
                {
                    b.HasOne("EshopAspCore.Data.Entity.Category", "Category")
                        .WithMany("ProductInCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EshopAspCore.Data.Entity.Product", "Product")
                        .WithMany("ProductInCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EshopAspCore.Data.Entity.ProductTranslation", b =>
                {
                    b.HasOne("EshopAspCore.Data.Entity.Language", "Language")
                        .WithMany("ProductTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EshopAspCore.Data.Entity.Product", "Product")
                        .WithMany("ProductTranslations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EshopAspCore.Data.Entity.Transaction", b =>
                {
                    b.HasOne("EshopAspCore.Data.Entity.AppUser", "AppUser")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("EshopAspCore.Data.Entity.AppUser", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("EshopAspCore.Data.Entity.Category", b =>
                {
                    b.Navigation("CategoryTranslations");

                    b.Navigation("ProductInCategories");
                });

            modelBuilder.Entity("EshopAspCore.Data.Entity.Language", b =>
                {
                    b.Navigation("CategoryTranslations");

                    b.Navigation("ProductTranslations");
                });

            modelBuilder.Entity("EshopAspCore.Data.Entity.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EshopAspCore.Data.Entity.Product", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductInCategories");

                    b.Navigation("ProductTranslations");
                });
#pragma warning restore 612, 618
        }
    }
}
